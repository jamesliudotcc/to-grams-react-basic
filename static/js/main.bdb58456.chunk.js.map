{"version":3,"sources":["constants.ts","Ingredient.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["UNITS","fromJS","cup","name","inOz","fl_oz","volume","tbsp","tsp","INGREDIENTS","water","density","oil","butter","flour","sugar","brown_sugar","bPowder","bSoda","cchips","yeast","Ingredient","useState","unit","setUnit","ingredient","setIngredient","toConvert","setToConvert","className","value","onChange","e","target","type","map","v","k","get","String","Math","round","Number","getIn","inGrams","App","num","setNum","Array","_","i","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uMAGaA,EAAQC,YAAO,CAC1BC,IAAK,CAAEC,KAAM,MAAOC,KAAM,GAC1BC,MAAO,CACLF,KAAM,gBACNC,KAAM,EACNE,QAAQ,GAEVC,KAAM,CACJJ,KAAM,aACNC,KAAM,GACNE,QAAQ,GAEVE,IAAK,CACHL,KAAM,WACNC,KAAM,EAAI,EACVE,QAAQ,KAGCG,EAAcR,YAAO,CAChCS,MAAO,CAAEP,KAAM,QAASQ,QAAS,GACjCC,IAAK,CAAET,KAAM,MAAOQ,QAAS,MAC7BE,OAAQ,CAAEV,KAAM,SAAUQ,QAAS,MACnCG,MAAO,CAAEX,KAAM,QAASQ,QAAS,MACjCI,MAAO,CAAEZ,KAAM,QAASQ,QAAS,MACjCK,YAAa,CAAEb,KAAM,cAAeQ,QAAS,KAC7CM,QAAS,CAAEd,KAAM,gBAAiBQ,QAAS,MAC3CO,MAAO,CAAEf,KAAM,cAAeQ,QAAS,MACvCQ,OAAQ,CAAEhB,KAAM,kBAAmBQ,QAAS,MAC5CS,MAAO,CAAEjB,KAAM,QAASQ,QAAS,QCsBpBU,MAjDf,WAAuB,IAAD,EACIC,mBAAS,OADb,mBACbC,EADa,KACPC,EADO,OAEgBF,mBAAS,SAFzB,mBAEbG,EAFa,KAEDC,EAFC,OAGcJ,mBAAS,KAHvB,mBAGbK,EAHa,KAGFC,EAHE,KA2BpB,OACE,yBAAKC,UAAU,cACb,2BACEC,MAAOH,EACPI,SAlBwB,SAACC,GAC7BJ,EAAaI,EAAEC,OAAOH,QAkBlBI,KAAK,WAEP,4BAAQJ,MAAOP,EAAMQ,SA7BA,SAACC,GACxBR,EAAQQ,EAAEC,OAAOH,SA6BZ9B,EAAMmC,KAAI,SAACC,EAAQC,GAAT,OACT,4BAAQP,MAAOO,GAAID,EAAEE,IAAI,aAG7B,4BAAQR,MAAOL,EAAYM,SA9BA,SAACC,GAC9BN,EAAcM,EAAEC,OAAOH,SA8BlBrB,EAAY0B,KAAI,SAACC,EAAQC,GAAT,OACf,4BAAQP,MAAOO,GAAID,EAAEE,IAAI,aAxBjB,SAACf,EAAcE,EAAoBE,GAAnC,OACdY,OACEC,KAAKC,MDrBgB,QCsBnBC,OAAOf,GAEL3B,EAAM2C,MAAM,CAACpB,EAAM,SACnBd,EAAYkC,MAAM,CAAClB,EAAY,cAC9B,IAoBJmB,CAAQrB,EAAME,EAAYE,KC1BlBkB,MAjBf,WAAgB,IAAD,EACSvB,mBAAS,GADlB,mBACNwB,EADM,KACDC,EADC,KAOb,OACE,oCACG,YAAIC,MAAMF,IAAMX,KAAI,SAACc,EAAGC,GAAJ,OACnB,kBAAC,EAAD,CAAYC,IAAKD,OAEnB,4BAAQE,QATI,WACdL,EAAOD,EAAM,KAQX,UCLcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bdb58456.chunk.js","sourcesContent":["import { fromJS } from \"immutable\";\n\nexport const GRAMS_IN_OZ = 29.5735;\nexport const UNITS = fromJS({\n  cup: { name: \"Cup\", inOz: 8 },\n  fl_oz: {\n    name: \"Ounce (Fluid)\",\n    inOz: 1,\n    volume: true,\n  },\n  tbsp: {\n    name: \"Tablespoon\",\n    inOz: 0.5,\n    volume: true,\n  },\n  tsp: {\n    name: \"Teaspoon\",\n    inOz: 1 / 6,\n    volume: true,\n  },\n});\nexport const INGREDIENTS = fromJS({\n  water: { name: \"Water\", density: 1 },\n  oil: { name: \"Oil\", density: 0.917 },\n  butter: { name: \"Butter\", density: 0.911 },\n  flour: { name: \"Flour\", density: 0.531 },\n  sugar: { name: \"Sugar\", density: 0.845 },\n  brown_sugar: { name: \"Brown Sugar\", density: 0.93 },\n  bPowder: { name: \"Baking Powder\", density: 0.972 },\n  bSoda: { name: \"Baking Soda\", density: 0.974 },\n  cchips: { name: \"Chocolate Chips\", density: 0.634 },\n  yeast: { name: \"Yeast\", density: 0.658 },\n});\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { GRAMS_IN_OZ, UNITS, INGREDIENTS } from \"./constants\";\n\nfunction Ingredient() {\n  const [unit, setUnit] = useState(\"cup\");\n  const [ingredient, setIngredient] = useState(\"water\");\n  const [toConvert, setToConvert] = useState(\"0\");\n\n  const handleUnitChange = (e: any) => {\n    setUnit(e.target.value);\n  };\n\n  const handleIngredientChange = (e: any) => {\n    setIngredient(e.target.value);\n  };\n\n  const handleToConvertChange = (e: any) => {\n    setToConvert(e.target.value);\n  };\n\n  const inGrams = (unit: string, ingredient: string, toConvert: string) =>\n    String(\n      Math.round(\n        Number(toConvert) *\n          GRAMS_IN_OZ *\n          UNITS.getIn([unit, \"inOz\"]) *\n          INGREDIENTS.getIn([ingredient, \"density\"])\n      ) || \"\"\n    );\n\n  return (\n    <div className=\"Ingredient\">\n      <input\n        value={toConvert}\n        onChange={handleToConvertChange}\n        type=\"number\"\n      ></input>\n      <select value={unit} onChange={handleUnitChange}>\n        {UNITS.map((v: any, k: any) => (\n          <option value={k}>{v.get(\"name\")}</option>\n        ))}\n      </select>\n      <select value={ingredient} onChange={handleIngredientChange}>\n        {INGREDIENTS.map((v: any, k: any) => (\n          <option value={k}>{v.get(\"name\")}</option>\n        ))}\n      </select>\n      {inGrams(unit, ingredient, toConvert)}\n    </div>\n  );\n}\n\nexport default Ingredient;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport Ingredient from \"./Ingredient\";\n\nfunction App() {\n  const [num, setNum] = useState(1);\n\n  const incrNum = () => {\n    setNum(num + 1);\n  };\n\n  return (\n    <>\n      {[...Array(num)].map((_, i) => (\n        <Ingredient key={i}></Ingredient>\n      ))}\n      <button onClick={incrNum}>More</button>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}